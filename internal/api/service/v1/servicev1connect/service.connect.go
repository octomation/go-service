// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/service/v1/service.proto

package servicev1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"

	v1 "go.octolab.org/template/service/internal/api/service/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// GreeterServiceName is the fully-qualified name of the GreeterService service.
	GreeterServiceName = "api.service.v1.GreeterService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GreeterServiceHelloProcedure is the fully-qualified name of the GreeterService's Hello RPC.
	GreeterServiceHelloProcedure = "/api.service.v1.GreeterService/Hello"
	// GreeterServiceSignProcedure is the fully-qualified name of the GreeterService's Sign RPC.
	GreeterServiceSignProcedure = "/api.service.v1.GreeterService/Sign"
)

// GreeterServiceClient is a client for the api.service.v1.GreeterService service.
type GreeterServiceClient interface {
	Hello(context.Context, *connect.Request[v1.HelloRequest]) (*connect.Response[v1.HelloResponse], error)
	Sign(context.Context, *connect.Request[v1.SignRequest]) (*connect.Response[v1.SignResponse], error)
}

// NewGreeterServiceClient constructs a client for the api.service.v1.GreeterService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGreeterServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GreeterServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &greeterServiceClient{
		hello: connect.NewClient[v1.HelloRequest, v1.HelloResponse](
			httpClient,
			baseURL+GreeterServiceHelloProcedure,
			opts...,
		),
		sign: connect.NewClient[v1.SignRequest, v1.SignResponse](
			httpClient,
			baseURL+GreeterServiceSignProcedure,
			opts...,
		),
	}
}

// greeterServiceClient implements GreeterServiceClient.
type greeterServiceClient struct {
	hello *connect.Client[v1.HelloRequest, v1.HelloResponse]
	sign  *connect.Client[v1.SignRequest, v1.SignResponse]
}

// Hello calls api.service.v1.GreeterService.Hello.
func (c *greeterServiceClient) Hello(ctx context.Context, req *connect.Request[v1.HelloRequest]) (*connect.Response[v1.HelloResponse], error) {
	return c.hello.CallUnary(ctx, req)
}

// Sign calls api.service.v1.GreeterService.Sign.
func (c *greeterServiceClient) Sign(ctx context.Context, req *connect.Request[v1.SignRequest]) (*connect.Response[v1.SignResponse], error) {
	return c.sign.CallUnary(ctx, req)
}

// GreeterServiceHandler is an implementation of the api.service.v1.GreeterService service.
type GreeterServiceHandler interface {
	Hello(context.Context, *connect.Request[v1.HelloRequest]) (*connect.Response[v1.HelloResponse], error)
	Sign(context.Context, *connect.Request[v1.SignRequest]) (*connect.Response[v1.SignResponse], error)
}

// NewGreeterServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGreeterServiceHandler(svc GreeterServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	greeterServiceHelloHandler := connect.NewUnaryHandler(
		GreeterServiceHelloProcedure,
		svc.Hello,
		opts...,
	)
	greeterServiceSignHandler := connect.NewUnaryHandler(
		GreeterServiceSignProcedure,
		svc.Sign,
		opts...,
	)
	return "/api.service.v1.GreeterService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GreeterServiceHelloProcedure:
			greeterServiceHelloHandler.ServeHTTP(w, r)
		case GreeterServiceSignProcedure:
			greeterServiceSignHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGreeterServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGreeterServiceHandler struct{}

func (UnimplementedGreeterServiceHandler) Hello(context.Context, *connect.Request[v1.HelloRequest]) (*connect.Response[v1.HelloResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.service.v1.GreeterService.Hello is not implemented"))
}

func (UnimplementedGreeterServiceHandler) Sign(context.Context, *connect.Request[v1.SignRequest]) (*connect.Response[v1.SignResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.service.v1.GreeterService.Sign is not implemented"))
}
